package com.tongji.oldman.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class HealthExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table health
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table health
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table health
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table health
     *
     * @mbg.generated
     */
    public HealthExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table health
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table health
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table health
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table health
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table health
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table health
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table health
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table health
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table health
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table health
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table health
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andHidIsNull() {
            addCriterion("hid is null");
            return (Criteria) this;
        }

        public Criteria andHidIsNotNull() {
            addCriterion("hid is not null");
            return (Criteria) this;
        }

        public Criteria andHidEqualTo(Integer value) {
            addCriterion("hid =", value, "hid");
            return (Criteria) this;
        }

        public Criteria andHidNotEqualTo(Integer value) {
            addCriterion("hid <>", value, "hid");
            return (Criteria) this;
        }

        public Criteria andHidGreaterThan(Integer value) {
            addCriterion("hid >", value, "hid");
            return (Criteria) this;
        }

        public Criteria andHidGreaterThanOrEqualTo(Integer value) {
            addCriterion("hid >=", value, "hid");
            return (Criteria) this;
        }

        public Criteria andHidLessThan(Integer value) {
            addCriterion("hid <", value, "hid");
            return (Criteria) this;
        }

        public Criteria andHidLessThanOrEqualTo(Integer value) {
            addCriterion("hid <=", value, "hid");
            return (Criteria) this;
        }

        public Criteria andHidIn(List<Integer> values) {
            addCriterion("hid in", values, "hid");
            return (Criteria) this;
        }

        public Criteria andHidNotIn(List<Integer> values) {
            addCriterion("hid not in", values, "hid");
            return (Criteria) this;
        }

        public Criteria andHidBetween(Integer value1, Integer value2) {
            addCriterion("hid between", value1, value2, "hid");
            return (Criteria) this;
        }

        public Criteria andHidNotBetween(Integer value1, Integer value2) {
            addCriterion("hid not between", value1, value2, "hid");
            return (Criteria) this;
        }

        public Criteria andOidIsNull() {
            addCriterion("oid is null");
            return (Criteria) this;
        }

        public Criteria andOidIsNotNull() {
            addCriterion("oid is not null");
            return (Criteria) this;
        }

        public Criteria andOidEqualTo(Integer value) {
            addCriterion("oid =", value, "oid");
            return (Criteria) this;
        }

        public Criteria andOidNotEqualTo(Integer value) {
            addCriterion("oid <>", value, "oid");
            return (Criteria) this;
        }

        public Criteria andOidGreaterThan(Integer value) {
            addCriterion("oid >", value, "oid");
            return (Criteria) this;
        }

        public Criteria andOidGreaterThanOrEqualTo(Integer value) {
            addCriterion("oid >=", value, "oid");
            return (Criteria) this;
        }

        public Criteria andOidLessThan(Integer value) {
            addCriterion("oid <", value, "oid");
            return (Criteria) this;
        }

        public Criteria andOidLessThanOrEqualTo(Integer value) {
            addCriterion("oid <=", value, "oid");
            return (Criteria) this;
        }

        public Criteria andOidIn(List<Integer> values) {
            addCriterion("oid in", values, "oid");
            return (Criteria) this;
        }

        public Criteria andOidNotIn(List<Integer> values) {
            addCriterion("oid not in", values, "oid");
            return (Criteria) this;
        }

        public Criteria andOidBetween(Integer value1, Integer value2) {
            addCriterion("oid between", value1, value2, "oid");
            return (Criteria) this;
        }

        public Criteria andOidNotBetween(Integer value1, Integer value2) {
            addCriterion("oid not between", value1, value2, "oid");
            return (Criteria) this;
        }

        public Criteria andWeightIsNull() {
            addCriterion("weight is null");
            return (Criteria) this;
        }

        public Criteria andWeightIsNotNull() {
            addCriterion("weight is not null");
            return (Criteria) this;
        }

        public Criteria andWeightEqualTo(Double value) {
            addCriterion("weight =", value, "weight");
            return (Criteria) this;
        }

        public Criteria andWeightNotEqualTo(Double value) {
            addCriterion("weight <>", value, "weight");
            return (Criteria) this;
        }

        public Criteria andWeightGreaterThan(Double value) {
            addCriterion("weight >", value, "weight");
            return (Criteria) this;
        }

        public Criteria andWeightGreaterThanOrEqualTo(Double value) {
            addCriterion("weight >=", value, "weight");
            return (Criteria) this;
        }

        public Criteria andWeightLessThan(Double value) {
            addCriterion("weight <", value, "weight");
            return (Criteria) this;
        }

        public Criteria andWeightLessThanOrEqualTo(Double value) {
            addCriterion("weight <=", value, "weight");
            return (Criteria) this;
        }

        public Criteria andWeightIn(List<Double> values) {
            addCriterion("weight in", values, "weight");
            return (Criteria) this;
        }

        public Criteria andWeightNotIn(List<Double> values) {
            addCriterion("weight not in", values, "weight");
            return (Criteria) this;
        }

        public Criteria andWeightBetween(Double value1, Double value2) {
            addCriterion("weight between", value1, value2, "weight");
            return (Criteria) this;
        }

        public Criteria andWeightNotBetween(Double value1, Double value2) {
            addCriterion("weight not between", value1, value2, "weight");
            return (Criteria) this;
        }

        public Criteria andBloodpressureIsNull() {
            addCriterion("bloodpressure is null");
            return (Criteria) this;
        }

        public Criteria andBloodpressureIsNotNull() {
            addCriterion("bloodpressure is not null");
            return (Criteria) this;
        }

        public Criteria andBloodpressureEqualTo(String value) {
            addCriterion("bloodpressure =", value, "bloodpressure");
            return (Criteria) this;
        }

        public Criteria andBloodpressureNotEqualTo(String value) {
            addCriterion("bloodpressure <>", value, "bloodpressure");
            return (Criteria) this;
        }

        public Criteria andBloodpressureGreaterThan(String value) {
            addCriterion("bloodpressure >", value, "bloodpressure");
            return (Criteria) this;
        }

        public Criteria andBloodpressureGreaterThanOrEqualTo(String value) {
            addCriterion("bloodpressure >=", value, "bloodpressure");
            return (Criteria) this;
        }

        public Criteria andBloodpressureLessThan(String value) {
            addCriterion("bloodpressure <", value, "bloodpressure");
            return (Criteria) this;
        }

        public Criteria andBloodpressureLessThanOrEqualTo(String value) {
            addCriterion("bloodpressure <=", value, "bloodpressure");
            return (Criteria) this;
        }

        public Criteria andBloodpressureLike(String value) {
            addCriterion("bloodpressure like", value, "bloodpressure");
            return (Criteria) this;
        }

        public Criteria andBloodpressureNotLike(String value) {
            addCriterion("bloodpressure not like", value, "bloodpressure");
            return (Criteria) this;
        }

        public Criteria andBloodpressureIn(List<String> values) {
            addCriterion("bloodpressure in", values, "bloodpressure");
            return (Criteria) this;
        }

        public Criteria andBloodpressureNotIn(List<String> values) {
            addCriterion("bloodpressure not in", values, "bloodpressure");
            return (Criteria) this;
        }

        public Criteria andBloodpressureBetween(String value1, String value2) {
            addCriterion("bloodpressure between", value1, value2, "bloodpressure");
            return (Criteria) this;
        }

        public Criteria andBloodpressureNotBetween(String value1, String value2) {
            addCriterion("bloodpressure not between", value1, value2, "bloodpressure");
            return (Criteria) this;
        }

        public Criteria andHeartbeatIsNull() {
            addCriterion("heartbeat is null");
            return (Criteria) this;
        }

        public Criteria andHeartbeatIsNotNull() {
            addCriterion("heartbeat is not null");
            return (Criteria) this;
        }

        public Criteria andHeartbeatEqualTo(Integer value) {
            addCriterion("heartbeat =", value, "heartbeat");
            return (Criteria) this;
        }

        public Criteria andHeartbeatNotEqualTo(Integer value) {
            addCriterion("heartbeat <>", value, "heartbeat");
            return (Criteria) this;
        }

        public Criteria andHeartbeatGreaterThan(Integer value) {
            addCriterion("heartbeat >", value, "heartbeat");
            return (Criteria) this;
        }

        public Criteria andHeartbeatGreaterThanOrEqualTo(Integer value) {
            addCriterion("heartbeat >=", value, "heartbeat");
            return (Criteria) this;
        }

        public Criteria andHeartbeatLessThan(Integer value) {
            addCriterion("heartbeat <", value, "heartbeat");
            return (Criteria) this;
        }

        public Criteria andHeartbeatLessThanOrEqualTo(Integer value) {
            addCriterion("heartbeat <=", value, "heartbeat");
            return (Criteria) this;
        }

        public Criteria andHeartbeatIn(List<Integer> values) {
            addCriterion("heartbeat in", values, "heartbeat");
            return (Criteria) this;
        }

        public Criteria andHeartbeatNotIn(List<Integer> values) {
            addCriterion("heartbeat not in", values, "heartbeat");
            return (Criteria) this;
        }

        public Criteria andHeartbeatBetween(Integer value1, Integer value2) {
            addCriterion("heartbeat between", value1, value2, "heartbeat");
            return (Criteria) this;
        }

        public Criteria andHeartbeatNotBetween(Integer value1, Integer value2) {
            addCriterion("heartbeat not between", value1, value2, "heartbeat");
            return (Criteria) this;
        }

        public Criteria andLeftsightIsNull() {
            addCriterion("leftsight is null");
            return (Criteria) this;
        }

        public Criteria andLeftsightIsNotNull() {
            addCriterion("leftsight is not null");
            return (Criteria) this;
        }

        public Criteria andLeftsightEqualTo(String value) {
            addCriterion("leftsight =", value, "leftsight");
            return (Criteria) this;
        }

        public Criteria andLeftsightNotEqualTo(String value) {
            addCriterion("leftsight <>", value, "leftsight");
            return (Criteria) this;
        }

        public Criteria andLeftsightGreaterThan(String value) {
            addCriterion("leftsight >", value, "leftsight");
            return (Criteria) this;
        }

        public Criteria andLeftsightGreaterThanOrEqualTo(String value) {
            addCriterion("leftsight >=", value, "leftsight");
            return (Criteria) this;
        }

        public Criteria andLeftsightLessThan(String value) {
            addCriterion("leftsight <", value, "leftsight");
            return (Criteria) this;
        }

        public Criteria andLeftsightLessThanOrEqualTo(String value) {
            addCriterion("leftsight <=", value, "leftsight");
            return (Criteria) this;
        }

        public Criteria andLeftsightLike(String value) {
            addCriterion("leftsight like", value, "leftsight");
            return (Criteria) this;
        }

        public Criteria andLeftsightNotLike(String value) {
            addCriterion("leftsight not like", value, "leftsight");
            return (Criteria) this;
        }

        public Criteria andLeftsightIn(List<String> values) {
            addCriterion("leftsight in", values, "leftsight");
            return (Criteria) this;
        }

        public Criteria andLeftsightNotIn(List<String> values) {
            addCriterion("leftsight not in", values, "leftsight");
            return (Criteria) this;
        }

        public Criteria andLeftsightBetween(String value1, String value2) {
            addCriterion("leftsight between", value1, value2, "leftsight");
            return (Criteria) this;
        }

        public Criteria andLeftsightNotBetween(String value1, String value2) {
            addCriterion("leftsight not between", value1, value2, "leftsight");
            return (Criteria) this;
        }

        public Criteria andRightsightIsNull() {
            addCriterion("rightsight is null");
            return (Criteria) this;
        }

        public Criteria andRightsightIsNotNull() {
            addCriterion("rightsight is not null");
            return (Criteria) this;
        }

        public Criteria andRightsightEqualTo(String value) {
            addCriterion("rightsight =", value, "rightsight");
            return (Criteria) this;
        }

        public Criteria andRightsightNotEqualTo(String value) {
            addCriterion("rightsight <>", value, "rightsight");
            return (Criteria) this;
        }

        public Criteria andRightsightGreaterThan(String value) {
            addCriterion("rightsight >", value, "rightsight");
            return (Criteria) this;
        }

        public Criteria andRightsightGreaterThanOrEqualTo(String value) {
            addCriterion("rightsight >=", value, "rightsight");
            return (Criteria) this;
        }

        public Criteria andRightsightLessThan(String value) {
            addCriterion("rightsight <", value, "rightsight");
            return (Criteria) this;
        }

        public Criteria andRightsightLessThanOrEqualTo(String value) {
            addCriterion("rightsight <=", value, "rightsight");
            return (Criteria) this;
        }

        public Criteria andRightsightLike(String value) {
            addCriterion("rightsight like", value, "rightsight");
            return (Criteria) this;
        }

        public Criteria andRightsightNotLike(String value) {
            addCriterion("rightsight not like", value, "rightsight");
            return (Criteria) this;
        }

        public Criteria andRightsightIn(List<String> values) {
            addCriterion("rightsight in", values, "rightsight");
            return (Criteria) this;
        }

        public Criteria andRightsightNotIn(List<String> values) {
            addCriterion("rightsight not in", values, "rightsight");
            return (Criteria) this;
        }

        public Criteria andRightsightBetween(String value1, String value2) {
            addCriterion("rightsight between", value1, value2, "rightsight");
            return (Criteria) this;
        }

        public Criteria andRightsightNotBetween(String value1, String value2) {
            addCriterion("rightsight not between", value1, value2, "rightsight");
            return (Criteria) this;
        }

        public Criteria andRecognizeIsNull() {
            addCriterion("recognize is null");
            return (Criteria) this;
        }

        public Criteria andRecognizeIsNotNull() {
            addCriterion("recognize is not null");
            return (Criteria) this;
        }

        public Criteria andRecognizeEqualTo(String value) {
            addCriterion("recognize =", value, "recognize");
            return (Criteria) this;
        }

        public Criteria andRecognizeNotEqualTo(String value) {
            addCriterion("recognize <>", value, "recognize");
            return (Criteria) this;
        }

        public Criteria andRecognizeGreaterThan(String value) {
            addCriterion("recognize >", value, "recognize");
            return (Criteria) this;
        }

        public Criteria andRecognizeGreaterThanOrEqualTo(String value) {
            addCriterion("recognize >=", value, "recognize");
            return (Criteria) this;
        }

        public Criteria andRecognizeLessThan(String value) {
            addCriterion("recognize <", value, "recognize");
            return (Criteria) this;
        }

        public Criteria andRecognizeLessThanOrEqualTo(String value) {
            addCriterion("recognize <=", value, "recognize");
            return (Criteria) this;
        }

        public Criteria andRecognizeLike(String value) {
            addCriterion("recognize like", value, "recognize");
            return (Criteria) this;
        }

        public Criteria andRecognizeNotLike(String value) {
            addCriterion("recognize not like", value, "recognize");
            return (Criteria) this;
        }

        public Criteria andRecognizeIn(List<String> values) {
            addCriterion("recognize in", values, "recognize");
            return (Criteria) this;
        }

        public Criteria andRecognizeNotIn(List<String> values) {
            addCriterion("recognize not in", values, "recognize");
            return (Criteria) this;
        }

        public Criteria andRecognizeBetween(String value1, String value2) {
            addCriterion("recognize between", value1, value2, "recognize");
            return (Criteria) this;
        }

        public Criteria andRecognizeNotBetween(String value1, String value2) {
            addCriterion("recognize not between", value1, value2, "recognize");
            return (Criteria) this;
        }

        public Criteria andMentalIsNull() {
            addCriterion("mental is null");
            return (Criteria) this;
        }

        public Criteria andMentalIsNotNull() {
            addCriterion("mental is not null");
            return (Criteria) this;
        }

        public Criteria andMentalEqualTo(String value) {
            addCriterion("mental =", value, "mental");
            return (Criteria) this;
        }

        public Criteria andMentalNotEqualTo(String value) {
            addCriterion("mental <>", value, "mental");
            return (Criteria) this;
        }

        public Criteria andMentalGreaterThan(String value) {
            addCriterion("mental >", value, "mental");
            return (Criteria) this;
        }

        public Criteria andMentalGreaterThanOrEqualTo(String value) {
            addCriterion("mental >=", value, "mental");
            return (Criteria) this;
        }

        public Criteria andMentalLessThan(String value) {
            addCriterion("mental <", value, "mental");
            return (Criteria) this;
        }

        public Criteria andMentalLessThanOrEqualTo(String value) {
            addCriterion("mental <=", value, "mental");
            return (Criteria) this;
        }

        public Criteria andMentalLike(String value) {
            addCriterion("mental like", value, "mental");
            return (Criteria) this;
        }

        public Criteria andMentalNotLike(String value) {
            addCriterion("mental not like", value, "mental");
            return (Criteria) this;
        }

        public Criteria andMentalIn(List<String> values) {
            addCriterion("mental in", values, "mental");
            return (Criteria) this;
        }

        public Criteria andMentalNotIn(List<String> values) {
            addCriterion("mental not in", values, "mental");
            return (Criteria) this;
        }

        public Criteria andMentalBetween(String value1, String value2) {
            addCriterion("mental between", value1, value2, "mental");
            return (Criteria) this;
        }

        public Criteria andMentalNotBetween(String value1, String value2) {
            addCriterion("mental not between", value1, value2, "mental");
            return (Criteria) this;
        }

        public Criteria andDateIsNull() {
            addCriterion("date is null");
            return (Criteria) this;
        }

        public Criteria andDateIsNotNull() {
            addCriterion("date is not null");
            return (Criteria) this;
        }

        public Criteria andDateEqualTo(Date value) {
            addCriterionForJDBCDate("date =", value, "date");
            return (Criteria) this;
        }

        public Criteria andDateNotEqualTo(Date value) {
            addCriterionForJDBCDate("date <>", value, "date");
            return (Criteria) this;
        }

        public Criteria andDateGreaterThan(Date value) {
            addCriterionForJDBCDate("date >", value, "date");
            return (Criteria) this;
        }

        public Criteria andDateGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("date >=", value, "date");
            return (Criteria) this;
        }

        public Criteria andDateLessThan(Date value) {
            addCriterionForJDBCDate("date <", value, "date");
            return (Criteria) this;
        }

        public Criteria andDateLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("date <=", value, "date");
            return (Criteria) this;
        }

        public Criteria andDateIn(List<Date> values) {
            addCriterionForJDBCDate("date in", values, "date");
            return (Criteria) this;
        }

        public Criteria andDateNotIn(List<Date> values) {
            addCriterionForJDBCDate("date not in", values, "date");
            return (Criteria) this;
        }

        public Criteria andDateBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("date between", value1, value2, "date");
            return (Criteria) this;
        }

        public Criteria andDateNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("date not between", value1, value2, "date");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table health
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table health
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}